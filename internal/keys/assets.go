// Code generated by go-bindata.
// sources:
// keys/3d:b9:c0:50:41:a7:68:4c:2e:2c:a9:a2:5a:04:b7:3f.plist
// keys/60:ae:0c:d6:f0:95:17:80:bc:93:46:7a:89:af:a3:2d.plist
// DO NOT EDIT!

package keys

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _keys3dB9C05041A7684c2e2cA9A25a04B73fPlist = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x94\x5d\x93\xa2\x38\x14\x86\xaf\xa7\x7f\x85\xeb\x7d\xb7\x01\xc5\x1a\xb7\x1c\xa7\x1a\x21\x28\x10\x94\x90\x8f\x86\xbb\x40\x28\x41\x3e\x4c\x2b\x2d\xc8\xaf\xdf\xea\x9e\xd9\xdd\xda\xda\xcb\xe7\xcd\x9b\x3a\xe7\xe6\x3c\xeb\x9f\x43\x53\x4f\xee\xf9\xf5\x56\x5e\xda\x1f\x53\xed\x05\x4c\x27\x79\x9b\x5d\x64\xd9\x9e\x7e\x4c\x29\x81\xcf\xdf\xa7\x3f\x37\x4f\xeb\x3f\xac\xc3\x96\xc4\x47\x7b\xa2\xea\xf2\xd6\x4d\x8e\xd4\xf4\xf7\xdb\xc9\xf4\x79\x36\x7b\x55\xaa\xce\x27\xdb\x4b\xa3\x3e\xba\xfc\x3a\x9b\x59\xc4\x9a\x1c\xfd\x7d\x44\x26\xda\x0b\x98\xcd\xec\x60\x3a\x99\x16\x5d\xa7\xfe\x9c\xcd\xfa\xbe\x7f\x11\x9f\xf5\x97\xec\xd2\x7c\x16\x6f\xb3\xe3\xf5\xa2\xf2\x6b\xf7\xf0\xcb\x5b\xf7\xac\xbd\x80\x17\xd9\xc9\xe9\xe6\x69\xfd\x6b\xcc\x7f\xf6\xda\x3c\xad\x65\x99\x75\x9b\xa7\x6f\xeb\x2a\x7f\x6c\xd4\x47\x5a\x97\xd9\x73\x95\x3f\xd6\xb3\x4f\x7e\xfa\xb6\x96\xa2\x13\x1b\x3f\x02\x9d\x1f\x69\x5b\x4c\xa5\x4b\x4a\x33\x64\xd4\x45\x11\x45\xa7\x08\xb0\xe4\xd7\x1b\xf0\x08\xad\xdd\x10\xd4\xef\x21\x35\xb6\x89\xde\x0d\xc2\xe9\x14\x1e\xeb\x39\xb2\x5d\x93\x52\xe6\x84\x14\x1e\x43\x00\xdb\x83\x0d\x83\x88\xd6\x56\xa8\x4b\xff\x93\x31\x85\x77\xa4\x05\xd7\x4c\x57\x46\x00\xb4\x23\x6a\xb2\x05\xe5\xc3\x2d\x39\xcb\x2d\x0b\x95\x26\xde\x0a\x48\x79\xfd\x1e\xcc\xe1\x21\x62\xee\x95\x82\xe2\xca\x79\xbf\x88\x9c\x61\x90\x5a\x71\xc8\x46\xd8\x7a\x1a\x1c\xd3\xb1\x70\xd8\x5c\x46\xa9\x15\xa0\x94\x2a\xc2\xb8\xd1\x13\xcd\x14\x07\x47\xbb\x49\x26\x23\x71\x96\x8b\x58\x57\x7e\xda\x32\x77\xdb\x16\x47\x7c\x36\xbb\x30\xfa\x7e\x47\xa0\x1e\x49\xcb\xf6\x52\x97\x31\xd3\xb1\xef\x03\xb7\x24\xfa\xaa\x0f\x46\xe8\x27\x4d\xb7\x10\xb6\x0d\xf8\xb9\xe8\x3d\x50\xe0\xb4\x29\x7c\x44\x8a\x81\x56\xf0\x98\x3a\xab\xe1\xe0\xb8\x4b\xfe\x96\x14\xc2\xd9\xeb\x41\x63\x7b\x79\x23\x39\x23\x0c\x22\xcd\x1d\xb1\x45\x17\x0c\x20\x3d\x21\xf0\x40\x99\x8c\x22\x47\x95\xc8\xd1\x08\xd2\x8b\x25\xd2\x82\x81\x71\xc6\x13\xc8\x10\xd1\xc1\xc8\xc6\xc4\xc4\x44\xc6\x92\xd7\x2c\x64\xee\x21\xb2\xe5\x23\xd6\xea\x33\x7a\xab\x1e\x5e\xaf\x86\xe0\x6c\x7a\x7c\x87\xae\xac\x32\x6e\xb8\x46\xbd\x70\xa4\x25\x5b\xf5\x1e\xcd\x55\x81\xd8\xc9\xc8\x78\x37\x86\xad\x1c\x49\x23\x05\xae\x0b\x33\x7b\x0b\x34\xe4\x40\x0f\xb7\x32\x8e\x88\x7d\x47\x3a\x5e\x24\x7c\x30\x33\x9a\xc0\xb4\xc5\x88\x33\x18\x6d\xcf\xaf\x8b\x60\xa7\x04\xb1\x60\xc3\x2d\x86\x11\xaf\x45\xe6\x04\xb6\xd8\xb1\x82\xf0\x84\x61\x9b\x25\xe1\xf9\x75\x41\x47\xe9\x11\x62\xc6\xde\xa3\x2b\xd3\x6a\x18\x58\xab\x0a\x46\x92\x31\x03\xf8\x4d\x3a\xdd\x98\x42\x57\x04\xe7\x40\xb0\xa8\xdb\x47\x84\x7a\x79\x53\x19\x02\xa8\x47\xa6\x1b\x7e\x46\x8d\xa3\x98\x9b\x5e\xd4\xba\x84\x56\xf8\x81\x1c\x78\xc7\x67\xa6\x63\x0b\xf7\x81\x0e\xee\x31\x97\x89\x37\x4a\x82\x2b\x43\x08\x2b\x19\x0f\xd4\x35\x18\x18\xe6\x81\xc5\xa0\x7c\x74\xbd\xa8\x19\xa3\x8d\x32\x44\xa8\x96\x04\x68\x24\x82\x85\x8d\xe6\xf1\x98\x8d\x05\x94\x63\x52\x31\x7d\xd5\xa7\x84\x85\xc4\xa1\x77\x6a\x9f\xc6\x84\xc3\x12\xd9\xac\x4d\x9d\xd5\x83\x59\x49\x11\x37\xb8\x17\xdb\x4e\x30\x67\x31\x0a\x3a\x20\xce\x58\x15\x39\x41\x13\x6a\xd0\x0a\x80\xe6\x6c\xab\xa0\x61\x4e\xad\x11\xde\x2d\xa2\xca\x55\x62\xdb\x5d\x0e\x76\xe1\x09\x5a\x9b\xb2\x51\x56\x72\x66\x83\x3c\x27\xa5\x80\xca\xa6\x3b\xe5\xe0\xf1\xb5\x4f\x6d\x15\x63\x9a\xf4\xc1\x0e\xab\xd4\x51\xcb\x9c\xc0\x26\x2d\xbb\x12\x55\xd2\x8f\xe7\xa6\x75\xe0\xa1\x47\xe9\x6d\x41\xec\x6c\x8e\x00\x86\xe2\xad\x10\xd9\xce\x6c\x28\x58\xed\x29\x58\x21\xc4\xe3\x81\xd5\xe6\x98\x10\x13\xcb\xb6\x5e\x4a\x1d\xf3\x0c\x0c\x23\x06\xf2\x9d\x01\x28\x92\xaa\x5f\x70\x2a\x59\x62\xd5\x8b\x58\x07\x8f\x9c\x1b\x1d\x1b\xe1\x47\x70\x52\x1e\x39\xd7\xcb\xc0\x5e\x5d\x92\x79\x8d\x85\xae\x35\x01\x85\x90\xbe\xa9\x38\xa2\x43\x88\x81\xd4\x50\x8d\x6d\xca\x0a\x23\x03\xc6\x1e\x3b\xe0\x4e\x5b\x8c\xd0\xce\x3d\x06\xf3\x6c\x48\x21\xf3\x22\xc2\xe2\x03\xd7\xaa\xd4\x4e\x62\x09\x06\xca\x77\xfb\xf9\xb6\x8e\xaf\x54\x37\x84\x37\xa7\x06\xdb\x76\x10\xdb\x27\x2d\x20\x6c\xc9\x2d\xd7\x4a\xc8\xa9\x0f\x01\x9c\x63\x0a\x4d\x4a\xc0\x6a\x5b\x7e\xdd\x7a\x87\xa9\x61\xef\xa1\xc9\xc2\x6a\x70\xc3\x87\xe9\x63\x56\x7d\xe5\x7e\x78\xf9\xb1\x9e\x7d\x29\xe3\x7f\x46\x79\xbe\x95\x63\xfe\x8f\x56\xca\xb6\xcb\x4f\xf9\x75\xb3\x00\xab\xe5\x7a\xf6\x37\xfd\xfe\x74\x2b\x4f\xad\xe8\x3e\xae\xf9\x73\xfa\xaf\x88\x6e\xdd\xb5\x6c\x4f\x1b\x76\x29\xe5\xc4\x2f\xdb\x8f\x61\x3d\xfb\x1d\x3d\xad\x67\xbf\x24\xb6\x9e\x7d\x29\x6e\xf3\xf4\x57\x00\x00\x00\xff\xff\xb8\x86\xfb\xe3\x82\x05\x00\x00")

func keys3dB9C05041A7684c2e2cA9A25a04B73fPlistBytes() ([]byte, error) {
	return bindataRead(
		_keys3dB9C05041A7684c2e2cA9A25a04B73fPlist,
		"keys/3d:b9:c0:50:41:a7:68:4c:2e:2c:a9:a2:5a:04:b7:3f.plist",
	)
}

func keys3dB9C05041A7684c2e2cA9A25a04B73fPlist() (*asset, error) {
	bytes, err := keys3dB9C05041A7684c2e2cA9A25a04B73fPlistBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/3d:b9:c0:50:41:a7:68:4c:2e:2c:a9:a2:5a:04:b7:3f.plist", size: 1410, mode: os.FileMode(420), modTime: time.Unix(1538081404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keys60Ae0cD6F0951780Bc93467a89AfA32dPlist = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x94\xcd\x72\xa3\x30\x16\x85\xd7\x9d\xa7\xf0\x78\x9f\x58\x80\xe9\x8a\xa7\xdc\xee\x0a\x58\xe0\x28\x46\x8e\x84\x24\x8c\x76\x18\x51\x06\x23\x40\xb1\x71\x0c\x7e\xfa\xa9\xa4\x7b\x66\x6a\x6a\x96\xe7\xdc\x73\x7f\x36\xf7\x5b\xfe\x1e\x1a\x3d\xf9\x2c\xce\x97\xaa\x6b\x7f\x4d\xad\x27\x30\x9d\x14\x6d\xde\xa9\xaa\x3d\xfe\x9a\x72\x16\x3c\x3e\x4f\x7f\xaf\x1e\x96\xff\x58\xef\x7c\x96\xbe\xc3\x89\xd1\xd5\xa5\x9f\xbc\x73\x6f\xfb\xea\x4f\xa6\x8f\xb3\xd9\x8b\x31\xba\x98\xf8\x5d\x63\xae\x7d\x71\x9e\xcd\xd6\x6c\x3d\x79\xdf\xbe\xc6\x6c\x62\x3d\x81\xd9\x0c\xe2\xe9\x64\x5a\xf6\xbd\xf9\xe7\x6c\x76\xbb\xdd\x9e\xb2\xaf\xf8\x53\xde\x35\x5f\xc1\xcb\xec\xfd\xdc\x99\xe2\xdc\x8f\xdb\xea\xd2\x3f\x5a\x4f\xe0\x49\xf5\x6a\xba\x7a\x58\xfe\x59\xf3\x3f\x77\xad\x1e\x96\xaa\xca\xfb\xd5\xc3\x8f\x65\x5d\x8c\x2b\x73\x3d\xe8\x2a\x7f\xac\x8b\x71\x39\xfb\xd2\x0f\x3f\x96\x2a\xeb\xb3\xd5\x36\x06\xfd\x36\xb6\x7c\xca\x15\x62\x95\x47\x04\x47\x51\xcc\xa3\x63\x0c\x84\xfc\x53\x03\x6f\x8c\x6b\x44\x80\xfe\x20\xdc\xf5\xa5\xdd\x0f\x59\xd8\x1b\x7a\xd7\x4e\x04\x91\xc7\xb9\x08\x09\x0f\xde\x09\x08\xda\x1d\x0c\x70\xcc\xf5\x9a\xd8\x6a\xfb\xa5\x29\x0f\xec\x5c\xe3\x9f\x44\x1b\xac\x1a\x65\x33\x80\x51\x04\x82\x34\xad\x17\x1f\x29\xe9\xc6\xbc\xee\xe3\x0c\x18\x26\x20\xb8\xa7\xe3\x22\xc8\x34\x45\x12\xe0\x96\x06\x65\xab\x12\xe0\x46\x00\x11\xe2\x50\xb9\x83\xd6\x89\x6a\xf9\x49\x2c\x0e\x98\xad\xd3\x18\xaa\x46\x84\xd6\x10\xdd\xb5\x2f\x6a\xf7\xc6\x36\x32\x8a\xe1\xcd\x8d\xed\xcb\xe0\xb7\x2f\x23\xbe\x97\x8c\x34\x65\x2a\xea\x05\x48\xeb\xd7\x91\x0a\xd9\x53\xd8\x5f\x55\x23\x11\x85\x82\x1f\x42\x1a\x51\xc7\x68\xec\xa0\x8c\x69\xf4\x26\x37\xd4\x62\x27\xd4\x27\xd5\x82\x8b\x16\x09\x72\xd2\x2c\xda\x68\x9a\x8e\x3d\x52\x49\x0a\xb2\x4d\xfa\x16\x8d\x3d\xdc\x31\x95\xc4\x09\xe5\x71\x5d\x7a\x18\x04\x2c\x3f\xbd\x80\xe8\x54\xde\x72\x28\x36\x71\xad\x1c\x6e\xe1\x2e\x61\x28\x8d\x1b\xe0\xd2\xb5\x40\x11\x14\x16\xb5\xd0\x3e\xbd\x43\xc0\xb8\xd8\x60\x9b\xa2\x18\x18\x93\x24\x1a\x47\xa1\x1b\xe0\x17\x03\x92\xe4\x79\xdc\x3a\xf2\x15\x43\x1d\x0a\x58\xd6\x07\x2d\xbd\xc8\x56\x32\x13\xc6\xa5\xa1\x5b\x29\x8e\x3d\x5e\x3d\xcf\xa9\xc0\x8d\x10\x54\x44\x0c\x33\x56\xe3\x77\x19\x22\x4b\x86\xe9\x9d\xae\x85\x9f\x3a\xf5\x59\x24\x1a\x53\x68\x50\x64\x69\xed\x9f\x28\xa6\x75\xef\xe7\x9a\xb8\x49\x53\x66\x6f\x40\xdd\x13\x88\xb2\x84\x91\x79\xd4\x0c\x43\x26\x8c\xc1\x35\x8e\xf0\xde\x03\xe9\x5d\x23\xce\x65\xb3\xf3\x17\x3a\xb6\x4c\xb9\x0b\x4d\xa9\xc2\xde\x88\x5a\x26\xd2\x41\x5b\xc9\xdd\x38\xab\x17\xbc\x80\xf3\x37\xa9\x15\x53\x0c\x5d\x33\xa7\xdc\x30\x7d\x3c\xa7\x4d\x99\x26\x7b\xda\x65\x5c\xed\x0f\xdc\x04\x09\x2b\x4f\x04\x04\xa4\xe0\x72\xf7\x06\x06\x1b\x0b\xa4\x15\xbc\x8c\x98\xc9\x56\x86\xb8\x8a\x5a\x7c\x3e\x70\x31\xc8\x44\xda\x51\x6b\x08\x19\x7b\x47\x1c\xcd\x9e\x34\xa8\x8e\xd7\xa2\xa2\x6b\x5a\x25\x8d\xb9\x46\x70\x6e\x27\xcd\x6d\x1e\xed\xd1\xd7\x8c\x9f\x74\x23\xaf\xaa\x49\xcf\xaa\x26\x03\x0e\x83\x50\x24\x28\xdb\x05\x41\x98\xef\xb9\x83\x85\x57\xb1\x35\x75\x70\x63\x49\xc6\xe8\x45\x42\xf0\x29\xef\x5e\xec\x9f\xe4\x2e\x81\x7c\x4e\xf6\x9d\x4b\x5a\x35\x8f\x5a\x0a\xa5\xd6\x3a\x76\x84\xa5\x36\xf9\x40\xf7\x1e\x39\x30\x24\x55\x2d\x5d\x11\x88\x2a\x4a\xf0\x67\xc1\x03\x4b\x40\x15\x17\x3c\x28\xf3\x75\x20\x04\x2c\x6d\x79\xd7\x97\x2c\xf0\x50\xdc\x58\x1d\xd5\xf0\x2d\x3e\x89\x33\xb1\xf3\x21\xe7\xc4\x21\x2c\x1a\x84\x7d\xbb\xf1\x66\xb8\x4a\x26\x3b\x09\xd4\x67\x14\x98\x8c\xd5\x9d\x95\x02\x83\xb7\x4e\xfa\x59\x68\xcc\x63\x60\x4e\x8a\xcb\x56\xd9\xcf\x4e\xbc\xf6\x3a\x06\x94\x39\xac\x25\x94\xcd\xf3\x7c\xc7\x5f\x41\x76\x34\x9b\x1d\x93\x1e\x71\x34\xe1\x63\x0f\x45\xdd\x13\xaa\xcb\x38\xd9\xab\x8f\x2d\x08\xce\x69\x5d\xde\x52\x01\x47\x79\x0a\x42\xc6\x83\x4f\xee\x78\x7e\xbe\x17\x30\xe7\x65\x17\x39\xe2\x9c\xdd\xf3\x21\xb6\x8e\x76\x76\x82\xae\x5a\x7b\x86\x9e\x4a\xc8\xf9\x30\xfa\xad\x04\x54\x63\x26\xa1\xfe\xa0\x10\xde\xa2\x66\x70\xa4\x48\x5d\xd6\x04\x34\x0f\xd4\x9d\x80\xc0\xa1\x3c\xf0\x38\x03\x0b\xbf\xfa\xfe\xf5\x9e\x72\x17\xbe\x06\x9e\x20\xf5\x80\xc8\xe8\x6d\xa9\xa8\xbf\xfd\x2d\xe9\x7e\x2d\x67\xdf\xc8\xf8\x3f\xa2\x3c\x5e\xaa\x7b\xf1\x1f\xac\x54\x6d\x5f\x1c\x8b\xf3\x6a\x0e\x16\x3f\x97\xb3\x7f\xab\xbf\x4d\x97\xea\xd8\x66\xfd\xf5\x5c\x3c\x1e\xfe\x0b\xa2\x4b\x7f\xae\xda\xe3\x4a\x74\x95\x9a\x6c\xab\xf6\x3a\x2c\x67\x7f\xad\x87\xe5\xec\x0f\xc4\x96\xb3\x6f\xc4\xad\x1e\xfe\x15\x00\x00\xff\xff\xab\xb6\x2c\x2c\x82\x05\x00\x00")

func keys60Ae0cD6F0951780Bc93467a89AfA32dPlistBytes() ([]byte, error) {
	return bindataRead(
		_keys60Ae0cD6F0951780Bc93467a89AfA32dPlist,
		"keys/60:ae:0c:d6:f0:95:17:80:bc:93:46:7a:89:af:a3:2d.plist",
	)
}

func keys60Ae0cD6F0951780Bc93467a89AfA32dPlist() (*asset, error) {
	bytes, err := keys60Ae0cD6F0951780Bc93467a89AfA32dPlistBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/60:ae:0c:d6:f0:95:17:80:bc:93:46:7a:89:af:a3:2d.plist", size: 1410, mode: os.FileMode(420), modTime: time.Unix(1538081404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"keys/3d:b9:c0:50:41:a7:68:4c:2e:2c:a9:a2:5a:04:b7:3f.plist": keys3dB9C05041A7684c2e2cA9A25a04B73fPlist,
	"keys/60:ae:0c:d6:f0:95:17:80:bc:93:46:7a:89:af:a3:2d.plist": keys60Ae0cD6F0951780Bc93467a89AfA32dPlist,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"keys": &bintree{nil, map[string]*bintree{
		"3d:b9:c0:50:41:a7:68:4c:2e:2c:a9:a2:5a:04:b7:3f.plist": &bintree{keys3dB9C05041A7684c2e2cA9A25a04B73fPlist, map[string]*bintree{}},
		"60:ae:0c:d6:f0:95:17:80:bc:93:46:7a:89:af:a3:2d.plist": &bintree{keys60Ae0cD6F0951780Bc93467a89AfA32dPlist, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

