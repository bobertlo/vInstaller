// Code generated by go-bindata.
// sources:
// templates/fstab
// templates/hosts
// templates/locale.conf
// templates/rc.conf
// DO NOT EDIT!

package installer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFstab = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\x8d\xc1\x6a\x44\x21\x0c\x45\xd7\xf1\x2b\x02\xb3\x69\x61\xb0\xb3\xe9\x4e\x5c\x95\xee\x4a\x0b\x33\x3f\x60\x31\x16\xe1\xa9\xe1\x25\x16\x1e\xe2\xbf\x97\x57\xb3\x3a\x27\x70\xef\xbd\x98\x0b\xde\x89\x30\x89\x86\xef\xa7\xd7\x67\x6b\xce\x8f\x4b\x79\x23\x94\x43\x94\x8a\x07\x17\xf3\xee\xc1\xe9\xc1\xe4\xc1\x35\xd6\xdc\xaa\x78\x00\x17\x7b\x61\x0f\x8e\x83\x88\x37\x5a\x38\x09\xc0\x8b\x16\x86\xc5\x91\x52\xe8\x9b\xca\xb5\x36\xe9\x39\x5e\x6b\x8b\xf4\x8b\x88\x37\x5c\x77\x33\x63\xe0\x1e\xea\x0f\xa1\xc5\x39\xcd\x18\xf6\xfd\x3e\x27\x8e\x61\x3f\x5a\xaf\xfa\x68\x4b\x1e\x07\xd3\xa2\xcf\xb5\xbd\xe4\xad\x17\x5e\xf4\x15\x44\xfe\xf3\x48\x35\x9e\x4d\x7f\x01\x00\x00\xff\xff\x55\x90\xa6\x77\xd6\x00\x00\x00")

func templatesFstabBytes() ([]byte, error) {
	return bindataRead(
		_templatesFstab,
		"templates/fstab",
	)
}

func templatesFstab() (*asset, error) {
	bytes, err := templatesFstabBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/fstab", size: 214, mode: os.FileMode(420), modTime: time.Unix(1538087934, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHosts = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xca\x31\xae\x83\x30\x0c\x80\xe1\xd9\x3e\x85\xa5\xcc\x18\x78\xc3\xab\x84\x10\x5b\x0f\xe2\x92\xd0\x46\x0d\x18\xc5\xe9\x84\xb8\x7b\x95\x89\xa1\xeb\xff\xfd\x0e\x1d\xb5\xa1\xcc\xed\x4b\xad\xd8\x40\x56\xa4\xc4\x99\x92\xea\xfb\xb3\x53\x91\x47\x0a\xb4\x68\xa6\xca\xb4\xc9\x1a\x0c\x1d\xa2\x1b\xe3\xde\x88\xf7\x39\x98\x4d\x00\x63\xd5\x8a\xec\x75\x95\xb8\xb1\xe6\xe7\x74\xd5\x09\xfb\xbf\x1b\x77\xdc\x71\x0f\x70\x1c\x7c\x9e\x90\x74\x96\x54\x1d\x87\xa1\x87\x9f\x4a\x71\xff\x6f\xae\x07\x1d\xdd\x37\x4f\xba\xd0\x12\x53\xc0\x6f\x00\x00\x00\xff\xff\x7f\xdf\x2a\xb0\xb4\x00\x00\x00")

func templatesHostsBytes() ([]byte, error) {
	return bindataRead(
		_templatesHosts,
		"templates/hosts",
	)
}

func templatesHosts() (*asset, error) {
	bytes, err := templatesHostsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/hosts", size: 180, mode: os.FileMode(420), modTime: time.Unix(1538087982, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLocaleConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x71\xf4\x73\xb7\xad\xae\xd6\xab\xad\xe5\xf2\x71\x8e\x77\xf6\xf7\xf1\x71\x0c\x71\xb5\x75\xe6\x02\x04\x00\x00\xff\xff\x68\xdb\xaa\xb7\x18\x00\x00\x00")

func templatesLocaleConfBytes() ([]byte, error) {
	return bindataRead(
		_templatesLocaleConf,
		"templates/locale.conf",
	)
}

func templatesLocaleConf() (*asset, error) {
	bytes, err := templatesLocaleConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/locale.conf", size: 24, mode: os.FileMode(420), modTime: time.Unix(1538088006, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRcConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x51\x6b\xd4\x40\x14\x85\x9f\x9d\x5f\x71\x49\x1e\x54\xe8\x26\xf8\x22\x5a\x88\x10\x62\x4a\x4b\xdc\x44\x76\x67\x91\xf6\x45\x66\x93\x1b\x33\x38\x99\xbb\xcc\xdc\x6c\x89\xa5\xff\x5d\x26\xda\xc5\x65\x5f\x7c\x9b\x39\xdc\xef\x7c\x27\x86\x14\xb9\x4d\x5d\x9b\xb4\x64\x7b\x58\x81\x9f\x3d\xe3\x08\xe1\xa7\x7f\x4c\x4e\xb1\x26\x0b\x3d\x39\x38\x92\xee\x84\x88\x61\x8b\x0c\x3c\x20\x0c\xe4\x19\xac\x1a\x31\x11\xb1\x88\xa1\x6e\x64\x79\x0d\x9a\x5f\x7b\x38\x38\xec\xd1\x39\xec\x80\x09\x3a\x6c\x8d\x72\x78\x42\x02\x01\xda\xfe\xd1\xfe\x13\x78\x46\xd5\x5d\x8b\x18\x5e\xad\x00\xdb\x81\x60\x9c\x17\xc3\xa7\xf3\xcb\xe0\xba\x6d\xb6\xb2\xce\xd7\x65\x16\x85\x4d\x2b\xa3\x8f\x18\xbd\x2c\xdb\xc8\x22\x58\x77\xb2\x00\x72\x60\xa8\x55\x86\xf5\xb2\xf1\x36\xdf\x7c\xfe\x96\x6f\xca\xe2\x4b\x53\x54\x59\xb4\x93\xc5\x09\x0a\x17\xbf\xc8\xe2\x15\xa8\xa3\xd2\x46\xed\x0d\xfa\x53\xe8\x41\x31\xa4\x93\x77\xa9\x1f\x94\xc3\x34\x64\xda\xf6\x94\x08\x79\xb7\x2e\x1f\x9a\xba\xcc\xa2\xa7\xa7\x44\xea\x11\x1f\xc8\xe2\xf3\xf3\x52\x5b\xe1\x3c\xaa\x43\x98\x62\x48\x75\x57\xe0\x11\x97\xd7\x4f\x9c\xfd\x9b\x0f\x6f\x13\x51\x95\xf7\xeb\xfc\xeb\x82\x56\x38\xef\x49\xb9\xee\x2f\x5a\x90\xf5\x64\x10\x7a\xb2\x7c\x5e\xe0\x91\x43\xb8\xf0\xf1\x4d\x53\xcb\x2c\x32\x8a\x3f\x3e\xae\xde\xbd\x3f\x23\x2f\xcc\x17\xe0\xf7\xe0\x0e\xc8\x4d\x90\x4c\x56\xff\x07\xb2\xab\xef\x5e\xa8\x7c\xa4\xc9\x32\x50\x0f\xcc\xb3\x87\xc7\x41\xb7\x03\xf8\x81\x26\xd3\xc1\x7e\x61\xa7\x43\x22\x62\x29\xef\xb7\x99\xf8\x1d\x00\x00\xff\xff\x73\x44\x1d\xc2\x63\x02\x00\x00")

func templatesRcConfBytes() ([]byte, error) {
	return bindataRead(
		_templatesRcConf,
		"templates/rc.conf",
	)
}

func templatesRcConf() (*asset, error) {
	bytes, err := templatesRcConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/rc.conf", size: 611, mode: os.FileMode(420), modTime: time.Unix(1538088223, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/fstab": templatesFstab,
	"templates/hosts": templatesHosts,
	"templates/locale.conf": templatesLocaleConf,
	"templates/rc.conf": templatesRcConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"fstab": &bintree{templatesFstab, map[string]*bintree{}},
		"hosts": &bintree{templatesHosts, map[string]*bintree{}},
		"locale.conf": &bintree{templatesLocaleConf, map[string]*bintree{}},
		"rc.conf": &bintree{templatesRcConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

